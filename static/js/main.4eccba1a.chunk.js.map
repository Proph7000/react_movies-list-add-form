{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/ErrorMessage/ErrorMessage.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","ErrorMessage","patternUrl","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isError","setIsError","isAddMovie","handleSubmit","preventDefault","test","setTimeout","current","onSubmit","disabled","App","state","moviesFromServer","addMovie","setState","newMovie","this","Component","ReactDOM","render","document","getElementById"],"mappings":"wyEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,qCACE,qBAAKC,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,oBAAIT,UAAU,SAAd,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,oBACEC,UAAU,OACV,UAAQ,aAFV,SAKE,cAAC,EAAD,CACED,MAAOA,KAHJA,EAAMY,OAJE,KAFsB,E,uBCKpC,IAAMC,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,MAII,IAHJC,aAGI,MAHIF,EAGJ,MAFJG,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASL,EAAT,YAXfM,KAAKC,SAASC,WAAWC,MAAM,GAWhB,IAAfC,EAAP,oBAGA,EAA6BL,oBAAS,GAAtC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWR,IAAaF,EAEzC,OACE,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ2B,QAASJ,EAAlC,SACGR,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACEuB,GAAIA,EACJ,0BAAkBV,GAClBb,UAAW4B,IAAW,QAAS,CAC7B,YAAaF,IAEfG,KAAK,OACLC,YAAW,gBAAWf,GACtBD,MAAOA,EACPG,SAAU,SAAAc,GAAK,OAAId,EAASc,EAAMC,OAAOlB,MAA1B,EACfmB,OAAQ,kBAAMR,GAAU,EAAhB,MAIXC,GACC,mBAAG1B,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECpDYmB,G,MAAe,kBAC1B,sBAAKlC,UAAU,qBAAf,UACE,oBAAIA,UAAU,sBAAd,oBAGA,2DALwB,GCatBmC,G,MAAa,sKAENC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BnB,mBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAA0BrB,mBAAS,IAAnC,mBAAOd,EAAP,KAAcoC,EAAd,KACA,EAAsCtB,mBAAS,IAA/C,mBAAOb,EAAP,KAAoBoC,EAApB,KACA,EAA4BvB,mBAAS,IAArC,mBAAOhB,EAAP,KAAewC,EAAf,KACA,EAA8BxB,mBAAS,IAAvC,mBAAOX,EAAP,KAAgBoC,EAAhB,KACA,EAA4BzB,mBAAS,IAArC,mBAAOP,EAAP,KAAeiC,EAAf,KACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KAMIC,GAAa,EASjB,SAASC,EAAajB,GACpBA,EAAMkB,iBAEDd,EAAWe,KAAKhD,IAAYiC,EAAWe,KAAK3C,KATjDuC,GAAW,GACXK,WAAWL,EAAY,KAAM,GAS3BC,GAPK,GAUHA,IAnBJR,GAAS,SAAAa,GAAO,OAAIA,EAAU,CAAd,IAqBdZ,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IACVP,EAAMjC,EAAOC,EAAaH,EAAQK,EAASI,GAE9C,CAED,OACE,qCACE,uBACEX,UAAU,WAEVqD,SAAU,SAACtB,GAAD,OAAWiB,EAAajB,EAAxB,EAHZ,UAKE,oBAAI/B,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPa,SAAU,SAACc,GAAD,OAAWS,EAAST,EAApB,EACVf,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,cACLE,MAAM,cACND,MAAOT,EACPY,SAAU,SAACc,GAAD,OAAWU,EAAeV,EAA1B,IAGZ,cAAC,EAAD,CACElB,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPe,SAAU,SAACc,GAAD,OAAWW,EAAUX,EAArB,EACVf,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,UACLE,MAAM,WACND,MAAOP,EACPU,SAAU,SAACc,GAAD,OAAWY,EAAWZ,EAAtB,EACVf,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,SACLE,MAAM,UACND,MAAOH,EACPM,SAAU,SAACc,GAAD,OAAWa,EAAUb,EAArB,EACVf,UAAQ,IAGV,qBAAKhB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACVsD,WAAYlD,GAASF,GAAUK,GAAWI,GAJ5C,uBA9CC2B,GA0DNO,GAAW,cAAC,EAAD,MAGjB,E,QChHYU,EAAb,4MACEC,MAAyB,CACvB/C,OAAQgD,GAFZ,EAKEC,SAAW,SACTtD,EACAC,EACAH,EACAK,EACAI,GAEA,EAAKgD,UAAS,SAACH,GACb,IAAMI,EAAW,CACfxD,QACAC,cACAH,SACAK,UACAI,UAGF,MAAO,CACLF,OAAO,GAAD,mBAAM+C,EAAM/C,QAAZ,CAAoBmD,IAE7B,GACF,EAzBH,4CA2BE,WACE,OACE,sBAAK5D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQoD,KAAKL,MAAM/C,WAEjC,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAUqC,MAAOwB,KAAKH,eAI7B,KAtCH,GAAyBI,aCPzBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.4eccba1a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <>\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <ul className=\"movies\">\n    {movies.map(movie => (\n      <li\n        className=\"card\"\n        data-cy=\"movie-card\"\n        key={movie.imdbId}\n      >\n        <MovieCard\n          movie={movie}\n        />\n      </li>\n    ))}\n  </ul>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","// import React from 'react';\nimport './ErrorMessage.scss';\n\nexport const ErrorMessage = () => (\n  <div className=\"notification error\">\n    <h2 className=\"notification__title\">\n      Error!\n    </h2>\n    <p>\n      Please, enter valid URL.\n    </p>\n  </div>\n);\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { ErrorMessage } from '../ErrorMessage';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (\n    title: string,\n    description: string,\n    imgUrl: string,\n    imdbUrl: string,\n    imdbId: string,\n  ) => void;\n};\n\n// eslint-disable-next-line max-len\nconst patternUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isError, setIsError] = useState(false);\n\n  const increase = () => {\n    setCount(current => current + 1);\n  };\n\n  let isAddMovie = true;\n\n  function showErrorMessage(): boolean {\n    setIsError(true);\n    setTimeout(setIsError, 5000, false);\n\n    return false;\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (!patternUrl.test(imgUrl) && !patternUrl.test(imdbUrl)) {\n      isAddMovie = showErrorMessage();\n    }\n\n    if (isAddMovie) {\n      increase();\n      setTitle('');\n      setDescription('');\n      setImgUrl('');\n      setImdbUrl('');\n      setImdbId('');\n      onAdd(title, description, imgUrl, imdbUrl, imdbId);\n    }\n  }\n\n  return (\n    <>\n      <form\n        className=\"NewMovie\"\n        key={count}\n        onSubmit={(event) => handleSubmit(event)}\n      >\n        <h2 className=\"title\">Add a movie</h2>\n\n        <TextField\n          name=\"title\"\n          label=\"Title\"\n          value={title}\n          onChange={(event) => setTitle(event)}\n          required\n        />\n\n        <TextField\n          name=\"description\"\n          label=\"Description\"\n          value={description}\n          onChange={(event) => setDescription(event)}\n        />\n\n        <TextField\n          name=\"imgUrl\"\n          label=\"Image URL\"\n          value={imgUrl}\n          onChange={(event) => setImgUrl(event)}\n          required\n        />\n\n        <TextField\n          name=\"imdbUrl\"\n          label=\"Imdb URL\"\n          value={imdbUrl}\n          onChange={(event) => setImdbUrl(event)}\n          required\n        />\n\n        <TextField\n          name=\"imdbId\"\n          label=\"Imdb ID\"\n          value={imdbId}\n          onChange={(event) => setImdbId(event)}\n          required\n        />\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              data-cy=\"submit-button\"\n              className=\"button is-link\"\n              disabled={!(title && imgUrl && imdbUrl && imdbId)}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {isError && <ErrorMessage />}\n    </>\n  );\n};\n","import { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\ntype State = {\n  movies: Movie[],\n};\n\nexport class App extends Component {\n  state: Readonly<State> = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (\n    title: string,\n    description: string,\n    imgUrl: string,\n    imdbUrl: string,\n    imdbId: string,\n  ) => {\n    this.setState((state: Readonly<State>) => {\n      const newMovie = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      return {\n        movies: [...state.movies, newMovie],\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={this.state.movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}